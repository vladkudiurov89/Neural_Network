{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "dz-2.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "dSOKfN3snuOO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from tensorflow.keras.models import Sequential # НС прямого распространения\n",
        "from tensorflow.keras.layers import Dense, Activation, Dropout, BatchNormalization, Conv2D, MaxPool2D, Flatten # Основные слои\n",
        "from tensorflow.keras import utils # Утилиты для to_categorical\n",
        "from tensorflow.keras.preprocessing import image # Для отрисовки изображения\n",
        "from tensorflow.keras.optimizers import Adam, Adadelta # Алгоритмы оптимизации, для настройки скорости обучения\n",
        "import numpy as np # Библиотека работы с массивами\n",
        "import matplotlib.pyplot as plt # Отрисовка изображений\n",
        "from PIL import Image # Отрисовка изображений\n",
        "import pandas as pd # Библиотека pandas\n",
        "from google.colab import files # Импорт файлов\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler # Функции для нормализации данных\n",
        "from sklearn import preprocessing # Пакет предварительной обработки данных\n",
        "\n",
        "# Отрисовывать изображения в ноутбуке, а не в консоль или файл\n",
        "%matplotlib inline"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gcofjH7Pn0dP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Downloads MNIST\n",
        "from tensorflow.keras.datasets import mnist\n",
        "(x_train_mnist, y_train_mnist), (x_test_mnist, y_test_mnist) = mnist.load_data()"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zJfGoRoWpX4y",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        },
        "outputId": "b09db7df-da31-421f-8f80-dc075fa7574d"
      },
      "source": [
        "# Меняем формат входных картинок с 28*28 на 784\n",
        "x_train = x_train_mnist[:50000].reshape(50000, 784)\n",
        "x_test = x_train_mnist[50000:60000].reshape(10000, 784)\n",
        "x_val_train = x_train_mnist[:500].reshape(500, 784)\n",
        "\n",
        "# Нормализуем данные\n",
        "x_train = x_train.astype('float32')  # преобразовываем x_train в тип float (цифры с плавающей точкой)\n",
        "x_train = x_train / 255  # делим на 255, чтобы диапазон был от 0 до 1\n",
        "x_test = x_test.astype('float32')  # преобразовываем x_test в тип float (цифры с плавающей точкой)\n",
        "x_test = x_test / 255  # делим на 255, чтобы диапазон был от 0 до 1\n",
        "x_val = x_val_train.astype('float32')\n",
        "x_val = x_val_train / 255 # делим на 255, чтобы диапазон был от 0 до 1\n",
        "\n",
        "# Преобразуем в вектор one_hot_coding\n",
        "y_train = utils.to_categorical(y_train_mnist[:50000], 10)\n",
        "y_test = utils.to_categorical(y_train_mnist[50000:60000], 10)\n",
        "y_val = utils.to_categorical(y_test_mnist[:500], 10)\n",
        "\n",
        "print(x_train.shape)\n",
        "print(x_test.shape)\n",
        "print(y_train.shape)\n",
        "print(y_test.shape)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(50000, 784)\n",
            "(10000, 784)\n",
            "(50000, 10)\n",
            "(10000, 10)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "66byERG5Nr4-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 763
        },
        "outputId": "73be149c-d28d-4537-c802-b55480daf6dd"
      },
      "source": [
        "def create_mod_1():\n",
        "  model_first = Sequential()\n",
        "  model_first.add(Dense(800, input_dim=784, activation='relu'))\n",
        "  model_first.add(Dropout(0.5))\n",
        "  model_first.add(Dense(400, activation='relu'))\n",
        "  model_first.add(Dropout(0.3))\n",
        "  model_first.add(Dense(200, activation='relu'))\n",
        "  model_first.add(Dropout(0.1))\n",
        "  model_first.add(Dense(10, activation='softmax'))\n",
        "  return model_first\n",
        "\n",
        "\n",
        "mod_1 = create_mod_1()\n",
        "mod_1.compile(loss='mse', optimizer='adam', metrics=['accuracy'])\n",
        "# mod_1.summary()\n",
        "hist_1 = mod_1.fit(x_train, y_train, batch_size=64, epochs=20, verbose=1, validation_split=0.2)\n",
        "score = mod_1.evaluate(x_test, y_test, verbose=1)\n",
        "print(f'Test accuracy: {round(score[1], 3)}')\n",
        "print(f'Test lost: {round(score[0], 3)}')\n"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0176 - accuracy: 0.8787 - val_loss: 0.0100 - val_accuracy: 0.9329\n",
            "Epoch 2/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0096 - accuracy: 0.9380 - val_loss: 0.0078 - val_accuracy: 0.9504\n",
            "Epoch 3/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0080 - accuracy: 0.9483 - val_loss: 0.0063 - val_accuracy: 0.9593\n",
            "Epoch 4/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0070 - accuracy: 0.9552 - val_loss: 0.0067 - val_accuracy: 0.9580\n",
            "Epoch 5/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0065 - accuracy: 0.9585 - val_loss: 0.0058 - val_accuracy: 0.9648\n",
            "Epoch 6/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0059 - accuracy: 0.9624 - val_loss: 0.0055 - val_accuracy: 0.9666\n",
            "Epoch 7/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0055 - accuracy: 0.9657 - val_loss: 0.0054 - val_accuracy: 0.9664\n",
            "Epoch 8/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0053 - accuracy: 0.9670 - val_loss: 0.0054 - val_accuracy: 0.9671\n",
            "Epoch 9/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0050 - accuracy: 0.9691 - val_loss: 0.0054 - val_accuracy: 0.9675\n",
            "Epoch 10/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0051 - accuracy: 0.9689 - val_loss: 0.0055 - val_accuracy: 0.9668\n",
            "Epoch 11/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0047 - accuracy: 0.9702 - val_loss: 0.0054 - val_accuracy: 0.9674\n",
            "Epoch 12/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0044 - accuracy: 0.9726 - val_loss: 0.0048 - val_accuracy: 0.9709\n",
            "Epoch 13/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0042 - accuracy: 0.9742 - val_loss: 0.0056 - val_accuracy: 0.9657\n",
            "Epoch 14/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0046 - accuracy: 0.9722 - val_loss: 0.0051 - val_accuracy: 0.9692\n",
            "Epoch 15/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0041 - accuracy: 0.9746 - val_loss: 0.0046 - val_accuracy: 0.9721\n",
            "Epoch 16/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0040 - accuracy: 0.9763 - val_loss: 0.0048 - val_accuracy: 0.9712\n",
            "Epoch 17/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0043 - accuracy: 0.9740 - val_loss: 0.0048 - val_accuracy: 0.9719\n",
            "Epoch 18/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0039 - accuracy: 0.9764 - val_loss: 0.0051 - val_accuracy: 0.9696\n",
            "Epoch 19/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0039 - accuracy: 0.9765 - val_loss: 0.0051 - val_accuracy: 0.9705\n",
            "Epoch 20/20\n",
            "625/625 [==============================] - 2s 3ms/step - loss: 0.0037 - accuracy: 0.9778 - val_loss: 0.0046 - val_accuracy: 0.9729\n",
            "313/313 [==============================] - 1s 2ms/step - loss: 0.0036 - accuracy: 0.9788\n",
            "Test accuracy: 0.979\n",
            "Test lost: 0.004\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Rh9rIHMIeVvU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 416
        },
        "outputId": "bbe48382-145b-448b-82d3-2b105597288a"
      },
      "source": [
        "mod_2 = create_mod_1()\n",
        "mod_2.compile(loss='mse', optimizer='adam', metrics=['accuracy'])\n",
        "# mod_2.summary()\n",
        "hist_2 = mod_2.fit(x_test, y_test, batch_size=8, epochs=10, verbose=1, validation_split=0.01)\n",
        "score_2 = mod_2.evaluate(x_val, y_val, verbose=1)\n",
        "print(f'Test accuracy: {round(score_2[1], 3)}')\n",
        "print(f'Test lost: {round(score_2[0], 3)}')\n"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "1238/1238 [==============================] - 3s 3ms/step - loss: 0.0273 - accuracy: 0.8143 - val_loss: 0.0154 - val_accuracy: 0.9100\n",
            "Epoch 2/10\n",
            "1238/1238 [==============================] - 3s 3ms/step - loss: 0.0164 - accuracy: 0.8937 - val_loss: 0.0070 - val_accuracy: 0.9400\n",
            "Epoch 3/10\n",
            "1238/1238 [==============================] - 3s 3ms/step - loss: 0.0147 - accuracy: 0.9083 - val_loss: 0.0102 - val_accuracy: 0.9200\n",
            "Epoch 4/10\n",
            "1238/1238 [==============================] - 3s 3ms/step - loss: 0.0115 - accuracy: 0.9274 - val_loss: 0.0074 - val_accuracy: 0.9600\n",
            "Epoch 5/10\n",
            "1238/1238 [==============================] - 3s 3ms/step - loss: 0.0126 - accuracy: 0.9220 - val_loss: 0.0052 - val_accuracy: 0.9700\n",
            "Epoch 6/10\n",
            "1238/1238 [==============================] - 3s 2ms/step - loss: 0.0118 - accuracy: 0.9278 - val_loss: 0.0114 - val_accuracy: 0.9400\n",
            "Epoch 7/10\n",
            "1238/1238 [==============================] - 3s 3ms/step - loss: 0.0113 - accuracy: 0.9315 - val_loss: 0.0090 - val_accuracy: 0.9500\n",
            "Epoch 8/10\n",
            "1238/1238 [==============================] - 3s 3ms/step - loss: 0.0100 - accuracy: 0.9411 - val_loss: 0.0074 - val_accuracy: 0.9600\n",
            "Epoch 9/10\n",
            "1238/1238 [==============================] - 3s 2ms/step - loss: 0.0099 - accuracy: 0.9408 - val_loss: 0.0065 - val_accuracy: 0.9700\n",
            "Epoch 10/10\n",
            "1238/1238 [==============================] - 3s 3ms/step - loss: 0.0107 - accuracy: 0.9377 - val_loss: 0.0051 - val_accuracy: 0.9700\n",
            "16/16 [==============================] - 0s 2ms/step - loss: 0.1792 - accuracy: 0.0960\n",
            "Test accuracy: 0.096\n",
            "Test lost: 0.179\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UmUhnfYDn2tY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 416
        },
        "outputId": "31185da4-2b24-4dc6-ff20-3868bb33cac5"
      },
      "source": [
        "model_3 = Sequential()\n",
        "model_3.add(BatchNormalization(input_shape=(784,)))\n",
        "model_3.add(Dense(800, activation='relu'))\n",
        "model_3.add(BatchNormalization())\n",
        "model_3.add(Dense(200, activation='relu'))\n",
        "model_3.add(BatchNormalization())\n",
        "model_3.add(Dense(10, activation='softmax'))\n",
        "\n",
        "model_3.compile(loss='mse', optimizer='adam', metrics=['accuracy'])\n",
        "# mod_4.summary()\n",
        "hist_4 = model_3.fit(x_val, y_val, batch_size=4, epochs=10, verbose=1, validation_split=0.01)\n",
        "score_4 = model_3.evaluate(x_train, y_train, verbose=1)\n",
        "print(f'Test accuracy: {round(score_4[1], 3)}')\n",
        "print(f'Test lost: {round(score_4[0], 3)}')\n"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "124/124 [==============================] - 1s 6ms/step - loss: 0.1093 - accuracy: 0.0909 - val_loss: 0.1022 - val_accuracy: 0.0000e+00\n",
            "Epoch 2/10\n",
            "124/124 [==============================] - 0s 4ms/step - loss: 0.0977 - accuracy: 0.1495 - val_loss: 0.1156 - val_accuracy: 0.0000e+00\n",
            "Epoch 3/10\n",
            "124/124 [==============================] - 0s 4ms/step - loss: 0.0949 - accuracy: 0.1515 - val_loss: 0.1202 - val_accuracy: 0.0000e+00\n",
            "Epoch 4/10\n",
            "124/124 [==============================] - 0s 4ms/step - loss: 0.0912 - accuracy: 0.1737 - val_loss: 0.1094 - val_accuracy: 0.2000\n",
            "Epoch 5/10\n",
            "124/124 [==============================] - 0s 4ms/step - loss: 0.0905 - accuracy: 0.1960 - val_loss: 0.1270 - val_accuracy: 0.0000e+00\n",
            "Epoch 6/10\n",
            "124/124 [==============================] - 0s 4ms/step - loss: 0.0883 - accuracy: 0.2202 - val_loss: 0.1152 - val_accuracy: 0.2000\n",
            "Epoch 7/10\n",
            "124/124 [==============================] - 0s 4ms/step - loss: 0.0879 - accuracy: 0.2343 - val_loss: 0.1124 - val_accuracy: 0.0000e+00\n",
            "Epoch 8/10\n",
            "124/124 [==============================] - 0s 4ms/step - loss: 0.0852 - accuracy: 0.2687 - val_loss: 0.1392 - val_accuracy: 0.0000e+00\n",
            "Epoch 9/10\n",
            "124/124 [==============================] - 0s 4ms/step - loss: 0.0862 - accuracy: 0.2727 - val_loss: 0.1229 - val_accuracy: 0.0000e+00\n",
            "Epoch 10/10\n",
            "124/124 [==============================] - 0s 4ms/step - loss: 0.0824 - accuracy: 0.2990 - val_loss: 0.1263 - val_accuracy: 0.0000e+00\n",
            "1563/1563 [==============================] - 3s 2ms/step - loss: 0.1209 - accuracy: 0.1088\n",
            "Test accuracy: 0.109\n",
            "Test lost: 0.121\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cw_L6IR1TORn",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "96c7b85c-02bc-4c92-85d0-64dbafa5f157"
      },
      "source": [
        "# files.upload()\n",
        "!ls "
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "sample_data\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "trnJBHVXUuhJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 398
        },
        "outputId": "586d5dda-cd0e-46b3-9b1b-52e75d3dc8f6"
      },
      "source": [
        "cars = pd.read_csv('cars_new.csv',sep=',')\n",
        "cars.head()"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-16-0cb32d3bb8e5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcars\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'cars_new.csv'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m','\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mcars\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mparser_f\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    674\u001b[0m         )\n\u001b[1;32m    675\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 676\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    677\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    678\u001b[0m     \u001b[0mparser_f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    446\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    447\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 448\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp_or_buf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    449\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    450\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    878\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    879\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 880\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    881\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    882\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1112\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"c\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1113\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"c\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1114\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1115\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1116\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"python\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   1889\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"usecols\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1890\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1891\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1892\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1893\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] File cars_new.csv does not exist: 'cars_new.csv'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0VOEa6NuWQGR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def create_dict(s):\n",
        "  new_dict = {}\n",
        "  for mark, name in enumerate(s):\n",
        "    new_dict.update({name: mark})\n",
        "  return new_dict\n",
        "\n",
        "def create_vec(value_, date_):\n",
        "  arr = [0] * len(date_)\n",
        "  arr = [date_[value_]] = 1\n",
        "  return arr"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GDMz70FId-en",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "marks_dict = create_dict(set(cars['mark']))\n",
        "models_dict = create_dict(set(cars['model']))\n",
        "bodies_dict = create_dict(set(cars['body']))\n",
        "kpps_dict = create_dict(set(cars['kpp']))\n",
        "fuels_dict = create_dict(set(cars['fuel']))\n",
        "\n",
        "prices = np.array(cars['price'], dtype=np.float)\n",
        "\n",
        "years = preprocessing.scale(cars['year'])\n",
        "mileages = preprocessing.scale(cars['mileage']) \n",
        "volumes = preprocessing.scale(cars['volume'])\n",
        "powers = preprocessing.scale(cars['power'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y57YW4zJi0xj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 374
        },
        "outputId": "c7533351-a21c-4f56-8f0f-015275c6ec6b"
      },
      "source": [
        "x_cars = []\n",
        "y_cars = []\n",
        "\n",
        "for _id, car in enumerate(np.array(cars)):\n",
        "  y_cars.append(prices[_id])\n",
        "\n",
        "  x_tr = create_vec(car[0], marks_dict) + create_vec(car[1], models_dict) + create_vec(car[5], bodies_dict) + create_vec(car[6], kpps_dict) +\\\n",
        "        create_vec(car[7], fuels_dict) + [years[_id]] + [mileages[_id]] + [volumes[_id]] + [powers[_id]]\n",
        "\n",
        "  x_cars.append[tr]\n",
        "\n",
        "\n",
        "x_cars = np.array(x_cars, dtype=np.float)\n",
        "y_cars = np.array(y_cars, dtype=np.float)\n",
        "\n",
        "print(x_cars.shape)\n",
        "print(y_cars.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-50-176603178efa>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0my_cars\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0m_id\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m   \u001b[0mx_tr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcreate_vec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcar\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarks_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mcreate_vec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcar\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodels_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mcreate_vec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcar\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbodies_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mcreate_vec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcar\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkpps_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m        \u001b[0mcreate_vec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcar\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfuels_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0myears\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0m_id\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mmileages\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0m_id\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mvolumes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0m_id\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mpowers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0m_id\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m   \u001b[0mx_cars\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtr\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-47-385dc0920fb7>\u001b[0m in \u001b[0;36mcreate_vec\u001b[0;34m(value_, date_)\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcreate_vec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdate_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m   \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdate_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m   \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mdate_\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mvalue_\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: 'int' object is not iterable"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CvZL4vnjmDrl",
        "colab_type": "text"
      },
      "source": [
        "Добрый день не могу понять ошибку в чем проблема, аналогичная ошибка возникает при создании таблицы int object is not len\n",
        "Думаю что настройки,буду разбираться.высылаю как есть тк скоро дедлайн. \n",
        "С уважением, Владислав"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kalrGOINTEY_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 711
        },
        "outputId": "32de09e7-912e-407a-e09b-be9512b95ab0"
      },
      "source": [
        "model_iula = Sequential()\n",
        "\n",
        "model_iula.add(Conv2D(32, (3,3), input_shape=(28,28,1)))\n",
        "BatchNormalization(axis=-1)\n",
        "model_iula.add(Activation('relu'))\n",
        " \n",
        "model_iula.add(Conv2D(32, (3,3)))\n",
        "BatchNormalization(axis=-1)\n",
        "model_iula.add(Activation('relu'))\n",
        "model_iula.add(MaxPool2D(pool_size=(2,2)))\n",
        "BatchNormalization(axis=-1)\n",
        "model_iula.add(Conv2D(64, (3,3)))\n",
        "BatchNormalization(axis=-1)\n",
        "model_iula.add(Activation('relu'))\n",
        "model_iula.add(Conv2D(64, (3,3)))\n",
        "model_iula.add(Activation('relu'))\n",
        "model_iula.add(MaxPool2D(pool_size=(2,2)))\n",
        "model_iula.add(Flatten())\n",
        "BatchNormalization()\n",
        "model_iula.add(Dense(512))\n",
        "BatchNormalization()\n",
        "model_iula.add(Activation('relu'))\n",
        "model_iula.add(Dropout(0.2))\n",
        "model_iula.add(Dense(10))\n",
        "model_iula.add(Activation('softmax'))\n",
        "\n",
        "model_iula.compile(loss='mse', optimizer='adam', metrics=['accuracy'])\n",
        "model_iula.summary()\n",
        "# fit(x_cars, y_cars, batch_size=64, epochs=20, verbose=1, validation_split=0.02)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_8\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_6 (Conv2D)            (None, 26, 26, 32)        320       \n",
            "_________________________________________________________________\n",
            "activation_6 (Activation)    (None, 26, 26, 32)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_7 (Conv2D)            (None, 24, 24, 32)        9248      \n",
            "_________________________________________________________________\n",
            "activation_7 (Activation)    (None, 24, 24, 32)        0         \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 12, 12, 32)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_8 (Conv2D)            (None, 10, 10, 64)        18496     \n",
            "_________________________________________________________________\n",
            "activation_8 (Activation)    (None, 10, 10, 64)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_9 (Conv2D)            (None, 8, 8, 64)          36928     \n",
            "_________________________________________________________________\n",
            "activation_9 (Activation)    (None, 8, 8, 64)          0         \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 4, 4, 64)          0         \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 1024)              0         \n",
            "_________________________________________________________________\n",
            "dense_16 (Dense)             (None, 512)               524800    \n",
            "_________________________________________________________________\n",
            "activation_10 (Activation)   (None, 512)               0         \n",
            "_________________________________________________________________\n",
            "dropout_12 (Dropout)         (None, 512)               0         \n",
            "_________________________________________________________________\n",
            "dense_17 (Dense)             (None, 10)                5130      \n",
            "_________________________________________________________________\n",
            "activation_11 (Activation)   (None, 10)                0         \n",
            "=================================================================\n",
            "Total params: 594,922\n",
            "Trainable params: 594,922\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}
