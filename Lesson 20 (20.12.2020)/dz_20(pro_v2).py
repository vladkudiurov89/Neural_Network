# -*- coding: utf-8 -*-
"""DZ-20(PRO v2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g9oEdw7HIgTEyPSJzGIoVEUygm71p6wS
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x

pip install deepspeech

!wget https://github.com/mozilla/DeepSpeech/releases/download/v0.8.2/deepspeech-0.8.2-models.pbmm

!pip install jiwer

!pip install git+https://github.com/librosa/librosa

from jiwer import wer # модуль метрики качества в распознавании речи
import numpy as np # библиотека для работы с массивами данных
from matplotlib import pyplot as plt # интерфейс для построения графиков простых функций
from IPython.display import HTML, Audio # загружаем модуль чтобы обратиться к HTML для записи аудио с микрофона в ноутбуке
from google.colab import files # модуль для загрузки файлов
from google.colab.output import eval_js
from base64 import b64decode # модуль для кодировки/раскодировки аудиозаписи(64-разрядный код)
from scipy.io.wavfile import read as wav_read # для чтения WAV формата
import io
import scipy # воспользуемся модулями библиотеки для работы со звуковой дорожкой
import librosa # для параметризации аудио
import os # модуль для работы с операционной системой(воспользуемся методами работы с каталогами)
from sklearn.model_selection import train_test_split # модуль для разбивки данных на обучающую и тестовую выборки
from keras.utils import to_categorical # загружаем утилиты кераса для one hot кодировки
from tqdm import tqdm # быстрый, удобный progress bar для Python
from keras.optimizers import Adam, RMSprop, Adadelta # загружаем алгоритмы обучения/оптимизации
from keras.models import Sequential # последовательная модель нейросети кераса
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, BatchNormalization # загружаем необходимые слои для нейросети
import IPython.display as ipd #Для проигрывания аудио
from deepspeech import Model

# Создадим модельку deepspeech и загрузим веса
ds = Model('/content/deepspeech-0.8.2-models.pbmm')

pip install youtube_dl

from IPython.display import YouTubeVideo
import youtube_dl
import scipy.io.wavfile

YOUTUBE_ID = 'S27pHKBEp30'

YouTubeVideo(YOUTUBE_ID)

!youtube-dl --extract-audio --audio-format wav --output "test1.%(ext)s" https://www.youtube.com/watch?v=S27pHKBEp30

# подключаем гугл драйв диск для загрузки файлов
from google.colab import drive 
drive.mount('/content/drive')

# Возьмем 10 секунд речи вначале
y, sr = librosa.load('/content/test1.wav', sr=16000, mono=True, offset=5, duration=10)
original_text = 'cool well thanks everybody um so i\'m gonna get the second talk tonight which i\'m not crazy about and and i don\'t want this pattern to to repeat but you know Andrew and i wanted'

ipd.display(ipd.Audio(y, rate = 16000))

plt.figure(figsize=(14,7))
plt.plot(y*40000)
plt.show()

test_for_ds = np.array(y*40000).astype(np.int16)
prediction = ds.stt(test_for_ds)
print(prediction)

# Функция для определения правильно определенных слов
def MyWer(original_text, prediction):
  original_words_set = original_text.split()
  predicted_words_set = prediction.split()
  okey_index = []
  j = 0
  for i, word1 in enumerate(original_words_set):
    if word1 in predicted_words_set[j:]:
      try:
        if j - predicted_words_set.index(word1, max(0,j-2),min(j+3,len(predicted_words_set))) < 3:
          okey_index.append(i)
          j = predicted_words_set.index(word1, max(0,j-2),min(j+3,len(predicted_words_set)))
      except:
        j += 1
    else:
      j += 1   
  return okey_index

original_words_set = original_text.split()
predicted_words_set = prediction.split()
okey_index = MyWer(original_text, prediction)

print(np.array(original_words_set)[okey_index])
s = abs(len(predicted_words_set) - len(original_words_set))

error_count = (len(predicted_words_set) + s - len(np.array(original_words_set)[okey_index]))/len(predicted_words_set)
print(error_count)

wer(original_text.lower(), prediction.lower())



